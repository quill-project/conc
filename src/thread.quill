
mod conc

struct Thread()

// Creates a new thread that immediately beings executing the given function.
// Returns a reference to the created thread.
pub ext fun Thread::spawn(f: Fun()) -> Thread = "
    #include(<quill_conc.h>)
    quill_struct_t thread_obj = quill_malloc(
        sizeof(quill_conc_thread_layout_t), &#fun(Thread::destruct)
    );
    quill_conc_thread_layout_t *thread_data 
        = (quill_conc_thread_layout_t *) thread_obj->data;
    quill_mutex_init(&thread_data->lock);
    quill_rc_add(#var(f).alloc);
    thread_data->task = #var(f);
    quill_conc_cond_init(&thread_data->joined);
    thread_data->done = QUILL_FALSE;
    quill_rc_add(thread_obj);
    // 'join' is implemented using a condition variable, so immediately destroy
    // any reference to the thread upon creation (while still keeping it alive),
    // which makes the OS responsible for cleaning it up after it has completed.
    #ifdef _WIN32
        uintptr_t thread = _beginthreadex(
            NULL, 0, &quill_conc_thread_start, thread_obj, 0, NULL
        );
        if(thread == 0) {
            quill_rc_dec(thread_obj);
            quill_rc_dec(thread_obj);
            quill_panic(quill_string_from_static_cstr(
                \"Failed to spawn thread\\n\"
            ));
        }
        CloseHandle((HANDLE) thread);
    #else
        pthread_t thread;
        int create_res = pthread_create(
                &thread, NULL, &quill_conc_thread_start, thread_obj
            )
            || pthread_detach(thread);
        if(create_res != 0) {
            quill_rc_dec(thread_obj);
            quill_rc_dec(thread_obj);
            quill_panic(quill_string_from_static_cstr(
                \"Failed to spawn thread\\n\"
            ));
        }
    #endif
    return thread_obj;
"

// Makes the calling thread wait for the given thread to complete execution.
// If the given thread has completed execution, the function returns immediately.
pub ext fun Thread::join(other: Thread) = "
    #include(<quill_conc.h>)
    quill_conc_thread_layout_t *thread_data 
        = (quill_conc_thread_layout_t *) #var(other)->data;
    quill_mutex_lock(&thread_data->lock);
    while(!thread_data->done) {
        quill_conc_cond_wait(&thread_data->joined, &thread_data->lock);
    }
    quill_mutex_unlock(&thread_data->lock);
    return QUILL_UNIT;
"

// Returns true if the given thread has completed execution, and otherwise false.
pub ext fun Thread::is_done(self: Thread) -> Bool = "
    #include(<quill_conc.h>)
    quill_conc_thread_layout_t *thread_data 
        = (quill_conc_thread_layout_t *) #var(self)->data;
    quill_mutex_lock(&thread_data->lock);
    quill_bool_t is_done = thread_data->done;
    quill_mutex_unlock(&thread_data->lock);
    return is_done;
"

ext fun Thread::destruct(self: mut Thread) = "
    #include(<quill_conc.h>)
    quill_conc_thread_layout_t *thread_data 
        = (quill_conc_thread_layout_t *) #var(self)->data;
    quill_mutex_destroy(&thread_data->lock);
    quill_rc_dec(thread_data->task.alloc);
    quill_conc_cond_destroy(&thread_data->joined);
    return QUILL_UNIT;
"