
mod conc

struct Mutex[T]()

fun box_value[T](value: T) -> mut Box[T] = Box(value)

// Creates a new mutex, containing the given value.
// Mutexes allow for mutual exclusion between threads when accessing a shared
// value, making sure only one thread can manipulate the contained value
// at the same time.
pub ext fun Mutex::new[T](value: T) -> mut Mutex[T] = "
    #include(<quill_conc.h>)
    quill_struct_t mutex_obj = quill_malloc(
        sizeof(quill_mutex_layout_t), &#fun(Mutex::destruct[T])
    );
    quill_mutex_layout_t *mutex_data 
        = (quill_mutex_layout_t *) mutex_obj->data;
    quill_mutex_init(&mutex_data->lock);
    mutex_data->value = #fun(box_value[T])(#var(value));
    return mutex_obj;
"

// Makes the calling thread wait until it acquires ownership of the mutex.
// Getting ownership multiple times is required to be supported.
ext fun Mutex::lock[T](self: mut Mutex[T]) = "
    #include(<quill_conc.h>)
    quill_mutex_layout_t *mutex_data 
        = (quill_mutex_layout_t *) #var(self)->data;
    quill_mutex_lock(&mutex_data->lock);
    return QUILL_UNIT;
"

// If the calling thread can legally acquire the mutex without waiting,
// the function acquires the mutex and otherwise simply returns.
// The function returns true only if the mutex has been acquired.
ext fun Mutex::try_lock[T](self: mut Mutex[T]) -> Bool = "
    #include(<quill_conc.h>)
    quill_mutex_layout_t *mutex_data 
        = (quill_mutex_layout_t *) #var(self)->data;
    return quill_mutex_try_lock(&mutex_data->lock);
"

// Makes the calling thread release ownership over the mutex.
// For the mutex to be released, this function must be called the same number
// of times that 'Mutex::lock' has been called.
ext fun Mutex::unlock[T](self: mut Mutex[T]) = "
    #include(<quill_conc.h>)
    quill_mutex_layout_t *mutex_data 
        = (quill_mutex_layout_t *) #var(self)->data;
    quill_mutex_unlock(&mutex_data->lock);
    return QUILL_UNIT;
"

// Returns the value protected by the mutex contained in a mutable box.
ext fun Mutex::contained[T](self: mut Mutex[T]) -> mut Box[T] = "
    #include(<quill_conc.h>)
    quill_mutex_layout_t *mutex_data 
        = (quill_mutex_layout_t *) #var(self)->data;
    #rc_add(Box[T])(mutex_data->value);
    return mutex_data->value;
"

ext fun Mutex::destruct[T](self: mut Mutex[T]) = "
    #include(<quill_conc.h>)
    quill_mutex_layout_t *mutex_data 
        = (quill_mutex_layout_t *) #var(self)->data;
    #rc_dec(Box[T])(mutex_data->value);
    quill_mutex_destroy(&mutex_data->lock);
    return QUILL_UNIT;
"

// Waits until the calling thread has acquired the mutex and executes the given
// function, passing a reference to the contained value.
//
// The reference to the contained value or a contained reference value 
// must NEVER be stored OUTSIDE THE FUNCTION.
// Doing so defeats the whole purpose of the mutex, since suddenly one does not
// need ownership over the mutex to modify the value.
// 
// The provided function may freely acquire ownership over the mutex.
// Ownership over the mutex is released after the provided function returns.
pub fun Mutex::take[T](self: mut Mutex[T], f: Fun(mut Box[T])) {
    self |> lock()
    f(self |> contained())
    self |> unlock()
}

// Acquires the given mutex and executes the given function, passing a reference
// to the contained value ONLY IF the mutex can be acquired immediately.
//
// The reference to the contained value or a contained reference value 
// must NEVER be stored OUTSIDE THE FUNCTION.
// Doing so defeats the whole purpose of the mutex, since suddenly one does not
// need ownership over the mutex to modify the value.
// 
// The provided function may freely acquire ownership over the mutex.
// Ownership over the mutex is released after the provided function returns.
// 
// The function returns true if ownership was acquired and the function was
// called, and otherwise returns false.
pub fun Mutex::try_take[T](self: mut Mutex[T], f: Fun(mut Box[T])) -> Bool {
    if !(self |> try_lock()) { return false }
    f(self |> contained())
    self |> unlock()
}

// Waits until the calling thread has acquired the mutex and executes the given
// function, passing the contained value, and returns the result 
// of the given function.
//
// The given function MUST NEVER return a contained reference value or store it
// OUTSIDE THE FUNCTION.
// Doing so defeats the whole purpose of the mutex, since suddenly one does not
// need ownership over the mutex to modify the value.
//
// The provided function may freely acquire ownership over the mutex.
// Ownership over the mutex is released after the provided function returns.
pub fun Mutex::compute[T, R](self: mut Mutex[T], f: Fun(T) -> R) -> R {
    self |> lock()
    val result: R = f((self |> contained()).value)
    self |> unlock()
    return result
}
